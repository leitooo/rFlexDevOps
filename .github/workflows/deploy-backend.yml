name: Backend Deployment Pipeline

# Se activa con cada push a la rama principal, asegurando que todos los cambios pasen por el proceso
on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Clona el repositorio para trabajar con la versión actualizada del código
      - name: Clonar repositorio
        uses: actions/checkout@v3

      # Configura el entorno PHP, estableciendo la versión (por ejemplo, 8.1) y las extensiones necesarias
      - name: Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, pdo_mysql

      # Instala las dependencias del proyecto utilizando Composer
      - name: Instalar dependencias de PHP
        run: composer install --prefer-dist --no-progress --no-suggest

      # Ejecuta tests para validar que el código funciona correctamente
      - name: Ejecutar tests
        run: php artisan test

      # Construye una imagen Docker para empaquetar la aplicación de forma consistente y reproducible
      - name: Construir imagen Docker
        run: docker build -t backend-app:latest .

      # Despliega automáticamente el código a producción mediante SSH y Docker Compose
      - name: Desplegar a producción
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          # Guardar la clave privada en un archivo y ajustar permisos
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          # Conectar vía SSH al servidor de producción y realizar las operaciones necesarias
          ssh -o StrictHostKeyChecking=no -i key.pem $SERVER_USER@$SERVER_IP "cd /var/www/backend && git pull && docker-compose down && docker-compose up -d --build"
