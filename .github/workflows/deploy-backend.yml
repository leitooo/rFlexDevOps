name: Backend Deployment Pipeline

on:
  push:
    branches:
      - main

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest

    steps:
      # Clonar el repositorio para trabajar con la versión actualizada del código
      - name: Clonar repositorio
        uses: actions/checkout@v3

      # Listar archivos en la raíz para verificar la estructura (debe incluir la carpeta 'mi-proyecto')
      - name: Listar archivos en la raíz
        run: ls -la

      # Configurar el entorno PHP, estableciendo la versión y las extensiones necesarias
      - name: Configurar PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: mbstring, xml, pdo_mysql

      # Cambiar al directorio 'mi-proyecto' e instalar las dependencias con Composer
      - name: Instalar dependencias de PHP en mi-proyecto
        run: |
          cd mi-proyecto
          composer install --prefer-dist --no-progress

      # Listar archivos dentro de 'mi-proyecto' para confirmar que el archivo 'artisan' está presente
      - name: Listar archivos en 'mi-proyecto'
        run: |
          cd mi-proyecto
          ls -la
      - name: Copiar .env y generar clave
        run: |
          cd mi-proyecto
          cp .env.example .env
          php artisan key:generate

      - name: Migraciones (si las pruebas las requieren)
        run: |
          cd mi-proyecto
          php artisan migrate --env=testing --force    

      # Ejecutar los tests del proyecto usando Artisan
      - name: Ejecutar tests con Artisan
        run: |
          cd mi-proyecto
          php artisan test

      # Construir la imagen Docker dentro del directorio 'mi-proyecto'
      - name: Construir imagen Docker en mi-proyecto
        run: |
          cd mi-proyecto
          docker build -t backend-app:latest .

      # Desplegar a producción mediante SSH y Docker Compose
      - name: Desplegar a producción
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SERVER_IP: ${{ secrets.SERVER_IP }}
          SERVER_USER: ${{ secrets.SERVER_USER }}
        run: |
          echo "$SSH_PRIVATE_KEY" > key.pem
          chmod 600 key.pem
          ssh -o StrictHostKeyChecking=no -i key.pem $SERVER_USER@$SERVER_IP "cd /var/www/backend && git pull && docker-compose down && docker-compose up -d --build"
